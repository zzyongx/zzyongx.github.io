#+TITLE: 跬步
#+AUTHOR: zzyongx
#+SETUPFILE: ../setup/theme-readtheorg-local.setup
#+OPTIONS: toc:nil

* 有意思的站点
[[https://karpathy.github.io/][Andrej Karpathy blog]]

* 2017 丁酉年
-------------
** 随笔
*** 利用前景理论引导用户行为
1. 面对获得时，是风险规避的。比如：(1) 确定得到100块 (2) 80%的可能得到150块时，选择 (1)
2. 面对损失是，是风险偏好的。比如：(1) 确定损失100块 (2) 80%的可能损失150块时，选择 (2)
3. 对损失比对获得敏感，先赢100块然后输80块，和先输80块再赢100块，虽然都是赢20块，但后者更愉快。

我感觉损失和获得也不能差太大，比如(1)确定得到100块和(2)80%的可能得到1000块，估计就选(2)了。

*** 成功科技产品的三个支柱
产品的使命是传递"价值"给用户，员工，股东。给事情安排优先级是最重要的事情，GEM模型是安排优先级的一种参考
1. Growth 增长。产品是否利于获取新用户，获取的成本是多少，是否对潜在用户更有吸引力了
2. Engagement 活跃度。产品的活跃度是否提升，留存率如何
3. Monetization 变现。产品创造的"价值"如何变现？巴菲特喜欢公司的特点：规模经济、网络效应、特许经营、习惯、品牌

*** 公司内不同团队合作
1. 共同的核心利益和诉求
2. 收益的共享

*** 我有一个想法
在职场，我们往往有很多想法，希望从公司获取资源来支持这些想法。如何才能提高成功率呢？
1. 有MVP（minimum viable product），通过MVP展示想法，和人沟通
2. 论证做的好处、不做的坏处，最后落实到增加盈利或降低成本

*** 笔记: 为啥Google没有作出Instagram
1. Google不能保持小团队，团队越大，产品迭代反而越慢，反之初创团队都比较小
2. Google不能从单一功能做起，一次做太多功能，反之初创团队，都从单一功能做起，不加或者慢慢加功能
3. Google必须使用统一的基础架构，反之初创团队的技术选择要灵活，一切以产品为中心
4. Google很难践行“精益创业“，大公司的东西，不能不带光环，多平台，支撑海量用户，不能有BUG，阻碍了产品成功

细想Google成功的领域，都是技术见长的，做产品还真是弱项。但技术强到一定程度，也没产品什么事儿了。

** 笔记
[[blog:a-managers-faq][一个管理者的FAQ]] <2017-05-19>

** 经验
[[blog:https-SNI][https如何支持虚拟主机]] <2017-05-20>

[[blog:grep-command-examples][grep]] <2017-03-09>
#+BEGIN_QUOTE
grep 常用选项
#+END_QUOTE

[[blog:brower_200_from_disk_cache_vs_304][如何控制浏览器缓存]] <2017-02-28>
#+BEGIN_QUOTE
浏览器缓存是性能优化的关键，更关键的是，一旦缓存错误，因为无法控制浏览器，所以很难修复，所以一开始就要配置正确
#+END_QUOTE

[[blog:mysql-acid-lock][MySQL的事务和锁]] <2017-01-09>
#+BEGIN_QUOTE
MySQL的事务隔离级别和背后的锁
#+END_QUOTE

** 翻译
[[blog:tcpdump-tutorial][tcpdump指南]]
#+BEGIN_QUOTE
轻松掌握开发利器tcpdump
#+END_QUOTE

* 2016 丙申年
------------

** 经验
[[blog:redis-memory-optimization-when-store-small-data][如何使用redis存储海量小数据]] <2016-11-22>
#+BEGIN_QUOTE
redis存储海量小数据，如何优化内存使用
#+END_QUOTE

[[blog:login-without-username-password-when-troubleshoot][排查问题时，如何使用用户身份登录]] <2016-11-14>
#+BEGIN_QUOTE
如何在没用用户的用户名和密码的情况下，使用用户身份登录，排查问题。
#+END_QUOTE

[[blog:modify-querystring-use-nginx][nginx proxy如何修改querystring]] <2016-11-03>
#+BEGIN_QUOTE
这应该算不上是一种技巧，但是它提醒我，专注于目的，而不是解决问题的手段。
#+END_QUOTE

[[blog:mybatis-spring-howto][mybatis使用详解]] <2016-10-21>
#+BEGIN_QUOTE
mybatis如何使用，以及用法背后的机制
#+END_QUOTE

[[blog:gitlab-install-config][gitlab 安装配置]] <2016-10-20>
#+BEGIN_QUOTE
gitlab 是团队协作，devops的关键环节，有时候小团队需要自己的gitlab。
#+END_QUOTE

[[blog:linux-terminal-shortcut][Linux 终端快捷键]] <2016-10-19>
#+BEGIN_QUOTE
终端快捷键信手拈来，别让“键程”束缚你的想
#+END_QUOTE

[[blog:linux-redirect][Linux 重定向]] <2016-10-19>
#+BEGIN_QUOTE
linux重定向基础，什么程序需要感知重定向，如何感知重定向
#+END_QUOTE

[[blog:crontab][Linux CRON 详解]] <2016-10-18>
#+BEGIN_QUOTE
cron语法，注意事项，最佳实践
#+END_QUOTE

[[blog:rsa-command-basic][RSA命令行工具和KEY格式]] <2016-02-28>
#+BEGIN_QUOTE
如何用程序生成RSA KEY，以及常用的KEY格式。
#+END_QUOTE

[[blog:cryptography-basic][密码系统常识]] <2016-02-28>
#+BEGIN_QUOTE
程序员应该知道的密码系统常识。和算法一样，这些作为基础知识，也是必须知道的。
#+END_QUOTE

[[blog:jdb][使用jdb调试java]] <2016-01-28>
#+BEGIN_QUOTE
使用IDE调试java程序要比jdb方便快捷，但是作为专业程序员，不能总依赖IDE不是。
#+END_QUOTE

[[blog:java-exception-tips][我的 Java 异常最佳实践]] <2016-01-25>
#+BEGIN_QUOTE
优先使用 Unchecked 异常，优先使用 try() 释放资源。
#+END_QUOTE

[[blog:bluff-Ioc-DI][唬人的Ioc和DI]] <2016-01-22>
#+BEGIN_QUOTE
借助反射，Ioc和DI让多态的使用更加优雅了，本身并没有超越多态的范畴。不理解也罢。
#+END_QUOTE

[[blog:lease-queue-implement-by-mysql][租约消息队列和其MySQL实现]] <2016-01-19>
#+BEGIN_QUOTE
站在数据结构的角度所讲的出队并不适合线上环境，因消费者崩溃带来的消息丢失是面临的主要问题，引入消息租约可以解决这一问题。可以很容易的用MySQL模拟其实现。
#+END_QUOTE

[[blog:nginx-upstream-send-invalid-header][upstream send invalid header]]
#+BEGIN_QUOTE
HTTP 协议对 HEADER 是有字符集要求的，字符集外的字符被视为非法字符，nginx 会报错 upstream send invalid header
#+END_QUOTE

** 阅读笔记

[[blog:http2][HTTP/2简介]] <2016-01-31>
#+BEGIN_QUOTE
主要介绍HTTP2的特性，实现现状，性能，如何从HTTP1.x升级到HTTP2
#+END_QUOTE

[[blog:how-https-connect-build][HTTPS 连接是如何建立的]] <2016-01-31>
#+BEGIN_QUOTE
通过了解 HTTPS 是如何建立的，了解HTTPS对性能的影响，以及HTTPS证书是如何保障安全的
#+END_QUOTE

[[blog:SYN-cookies][SYN cookie是什么]]
#+BEGIN_QUOTE
SYN cookie 解决了什么问题，原理是什么，有什么缺陷
#+END_QUOTE

[[blog:failure-modes-in-distributed-systems][分布式系统中的失败模型]]
#+BEGIN_QUOTE
失败模型的核心是确定性，确定性高的失败要优于确定性低的失败。
#+END_QUOTE

* 2015 乙未年
------------

** 经验

[[blog:maven-howto][maven HOWTO]]
#+BEGIN_QUOTE
maven 是重要的java构建工具，该文档涵盖了maven的常见用法
#+END_QUOTE

** 翻译

[[blog:tcp-keepalive-howto][TCP Keepalive HOWTO]]
#+BEGIN_QUOTE
介绍了TCP Keepalive产生的背景，使用场景，和如何使用。
对于理解TCP协议和系统开发很有帮助。
#+END_QUOTE

[[blog:some-REST-best-practices][一些REST最佳实践]]
#+BEGIN_QUOTE
越来越多的服务接口采用HTTP的方式，而RESTful风格可以让API语义更清晰。
#+END_QUOTE

[[blog:cap-confusion-problems-with-partition-tolerance][CAP迷思：关于分区容忍性]]
#+BEGIN_QUOTE
作者说CAP，其实只能是CP或者AP，因为P必选。
#+END_QUOTE
