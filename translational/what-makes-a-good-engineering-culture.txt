如何建立好的工程师文化

在微博上看到@左耳朵耗子推荐的文章 What makes a good engineering culture? 觉得很不错，就翻译如下，初次翻译，不周之处很多，英文好的建议读原文 http://www.quora.com/What-makes-a-good-engineering-culture。尽信书不如无书，好文也要辩证的看，各位自辩。

面试中，我最喜欢问的问题之一是关于工程师文化的，在上一家公司中有哪个他们喜欢和不喜欢的文化。面试多了，再加上自己过去6年在Google，Ooyala，Quora的经历，谈谈自己的感悟，团队如何建立好的工程师文化？

1. 优化迭代速度
快速迭代会增加工作动力和激情。基础设施和官僚主义阻碍代码部署和feature上线，使人沮丧，是很多面试候选人离职的原因。

从组织上讲，快速迭代给工程师、设计师灵活性和自主性，他们可以每天自主决策而不用请示授权。我在Google时，任何对用户可见的搜索结果的修改，甚至是用户用的很少的功能，都要Marissa Mayer在每周的UI审查上同意。不用说，这保护了Google的搜索品牌，但是伤害了创造性。优化迭代速度意味着有定义良好的产品上线流程，在投入很多精力后，上线不会被无故取消。

从架构上讲，优化迭代速度意味着增加快速部署流程，以支持持续部署，高的测试覆盖率减少构建和站点中断，快速的单元测试，快速、增量编译和reload以减少开发时间。特别值得一提的是，持续部署意味着提交的代码会很快上到生产环境。在Quora采用快速迭代之前，很难内在化快速迭代带来的好处超过站点中断的风险，至少对小团队如此。人们对feature很兴奋，有动力去修复bug，因为这些会很快在线上看到效果。相比一周甚至数周批量提交，在小的时间窗口内，更容易发现和修复bug。

团队智慧，快速迭代意味着有强有力的领导来协调和驱动团队努力。一个决定的核心利益相关方需要快速作出决定，执行他们的决定。借用Bill Walsh的名言，强大的领导力需要“commit，explode，recover“。这意味着，提交进攻计划，执行，根据结果作出回应。犹豫不决的团队，团队成员的努力也犹豫不决。


2. 坚持推进自动化
Instagram 联合创始人Mike Krieger在他的演讲Scaling Instagram中提到，在将自己的产品扩展到千万用户的过程中，他们13人的团队学到最重要的东西是“优化哪怕是最小的运维负担”。随着产品规模扩大，运维负担（通过用户和工程师的比例或者feature和工程师的比例衡量）也随之增加。众所周知，Facebook 吹捧它的扩展矩阵，每个工程师支持100万用户。

自动化解决方案，脚本化重复任务非常重要，因为它解放了工程师，使其专注于真正的产品。确保服务失败时自动重启，在流量高峰时可以简单快速的复制服务是管理扩展复杂性的明智方法。短期总是受到人工快速处理的诱惑，而不是自动化和长的测试周期

Etsy的座右铭是“measure anything，measure everything“，它支持了开源的监控和绘图工具，例如graphite和statsd。这凸显了自动化的一个重要方面，自动化必须被数据和监控驱动。离开了监控和日志，无从得知what，how，or why出问题了。更好的座右铭应该是“measure anything，measure everything，and automate as much as possible“


3. 建立好的软件抽象
MIT 教授 Daniel Jackson 这样描述好的软件抽象的重要性：
  好的抽象，从设计到编程水到渠成，模块有小而简单的接口，新功能的添加自然而然，不需要为扩展功能重新组织代码。坏的抽象，是一系列不愉快的惊奇，接口是笨拙的刻意雕琢的，好像不得不被迫适应不曾预料的交互，即使很简单的改动也很困难。

部分得益于天才程序员诸如Jeff Dean、Sanjay Ghemawat创建了简单却通用的抽象，例如MapReduce、SSTable、Protocol Buffer，成千程序员才能在Google创建可扩展系统。Facebook有Thrift、Scribe、Hive。Quora有Webnode、Livenode。

保持核心抽象简单通用，减少了定制化解决方案的需求，增加了团队对公共抽象的熟悉和专业程度。日渐流行和稳定的开源系统，诸如Memcached，Redis，MongoDB等，减少了自己开发存储和缓存系统的需求。团队聚焦少数核心抽象而不是把精力分散到许多特定的解决方案，使得通用库更健壮，监控更智能，性能关键点理解的更深刻，测试更全面，而这些又使得构建出的系统更简单，更易运维。


4. 借助core review，提高对代码质量的关注
维护高质量的代码增加了团队的产出。干净的代码更易排错，基于它的开发更容易，变更更顺畅，更少出bug。健康的code review流程使之成为可能。

建立及时的code review流程，无论是pre-commit还是post-commit，都可以从以下方面改进代码质量。首先，知道其它人会看你的代码带来的压力，以及糟糕代码很可能令同事失望，有种威慑力，阻止写出hacky，难以维护的，未经测试的代码。其次，code review 提供了code review人和作者相互学习，以写出更好代码的机会。

如果团队其它人很方便的看到code review经过，还带来了其它好处。1. 立即code review增加责任感，2. 团队成员，尤其是新人，学习他人如何做code review，3. 加快传播最佳编程实践。

相反的观点认为，敏捷团队没有时间做code review。这种观点忽略了写的烂的代码很容易累积成技术债。在Ooyala早期，习惯于尽可能的开发多的新功能，缺少code review。这样的好处是产品可以尽快上线，但修改代码很痛苦。我们花了一年时间重写脆弱的代码以消除技术债。

以Google之大，对全部代码做pre-commit的code review。但是对小团队，没必要如此全面、严格，也不是所有代码都需要相同程度的严格。当我在Ooyala时，它采用邮件的方式对核心和高风险改动做post-commit code review。在Quora，我们用Phabricator（facebook开发的code review工具）对所有代码做code review，大部分是post-commit，对mode，controller，view代码用不同的标准。对敏感代码和新手写的代码，做pre-commit或者在提交后几小时内做code review。

5. 保持融洽的工作氛围
互相尊重是任何形式的开放讨论的基础。一个大家可以自然的质疑其它人的主意的地方，也是通过讨论可以锤炼好主意的地方。一个人很容易被冒犯的地方，也是关键反馈被抑制的地方。

在1948，Alex Osborn 勾勒出大家熟知的头脑风暴法，近几十年流行于工作环境，参与者聚在一起，摒弃批评和负面反馈，把创造性的意见汇集起来，不用担心被人评判。有礼貌的延后评价是此类头脑风暴的关键。最新的心理学研究开始推翻Osborn的方法，鼓励在头脑风暴中辩论，实际上可以避免群体思维，产生更有效的主意。此类研究表明，融洽的气氛更加重要，这样攻击会会针对想法而不会感情用事。

参与的工程师经常跨越很广的领域（系统，机器学习，产品等），不是每个人在每个领域都有相同的知识。事实上，强大的团队中，每个人应该在特定领域有很强的能力，即使在其它领域稍弱。这让事情有点棘手，例如，系统工程师在产品工程师的强项领域做评论。但这是很重要的，健康的工程师文化尊重这些不同，不会仅仅基于你自己的强项做评论。

6. 建立代码共同所有权
尽管每个人在代码或架构的不同部分有优势，这是自然的，但是不该有人觉得他们拥有或者是任何一段代码的唯一维护者。尽管个人在特定领域是专家一年甚至更久，在短期内提高了效率，但这种方法长期是有害的。

从组织架构上来看，分享代码所有有三个好处。第一，保持维护者【原文是bus factor】多于一人，可以减轻维护者的压力，降低维护者离职给团队带来的风险。不然，个人很难安心离开一段时间。我无法忘了那些日子，当时我是Ooyala的日志处理器的唯一维护者，当我在Hawaii火山徒步时，收到了页面报警的短信。

第二，共享所有权使得没有深陷特定领域的工程师贡献新鲜视角，同时把深陷特定项目的工程师解放出来，鼓励他们做有些有差异的项目，可以帮助他们保持工作兴趣，激发学习积极性。长远看，它降低了工程师感到停滞不前，从而决定离开的组织风险，

第三，有需要时可以把多个团队成员聚集起来，更快完成重要目标，共享所有权为此奠定了基础。如果是单一所有权，重担经常落到一到两个人身上。

很多组织过早的犯了这样的错，当团队很小时，就把整个团队拆成子团队，每个子团队一个技术负责人。子团队给所有权建了一道墙，减少了跨过这些墙的动机，因为个人更可能根据子团队的目标被评估。当我在Ooyala时，他们有子团队，我错过和其它团队的人一起工作的机会。目前他们已经采用了一种敏捷开发方法，更多的关注共享代码所有权，据说在工作开心程度和产出上有很大进步。我喜欢Quora的一个地方就是，我们更多强调项目，而不是团队。我有机会参与不同项目的工作，从用户增长，机器学习，审核工具，推荐系统，分析系统，站点加速到垃圾邮件检测。

7. 投资自动化测试
管理有很多开发者的庞大代码，要想构建和产品不被经常打断，单元测试覆盖率，和一定程度的集成测试覆盖率是唯一可扩展的方法。当要提高代码质量进行大范围重构时，自动化测试提供了信心和重要保护。缺少自动化测试，无论是工程师团队，还是外包，人工测试耗费的时间很容易过高，并且形成一种文化，害怕改进代码，因为可能出错。

实践中，随着团队的增长，持续部署也要求自动化测试。随着产品的增加，代码越来越多，但是随着新人加入，对代码的平均熟悉程度在下降。当最初的开发者写完代码，这时对代码还很熟悉，此时做测试和验证是最容易的，等到经年累月后修改代码，再做就很难了。好的单元测试文化把验证的责任交给作者。

8. 分配20%时间
Gmail 发源于Paul Buchheit的20%项目，他用一天时间完成了第一版。Google新闻，Google翻译和Google建议都开始于20%项目。在Google时，我用20%时间开发了一个python框架，用它构建搜索页面demo非常容易。尽管现在Google的20%时间没有早期那么有产出了，对小团队而言，让工程师有20%的时间做不是他们原本的项目，仍然是创新的发祥地。

当我在Ooyala时，没有官方的20%时间，但是我还是挤出时间为Flex和Actionscript开发了一个命令行构建工具，用来加速构建时间，随着Adobe的Flex构建工具链开始衰落，这个工具仍然在使用，纵使团队接近三倍规模。在试验一年后，Atlassian采纳了20%时间。Facebook发明了20%时间的一个变形，后来被Ooyala采纳，它就是定期黑客马拉松，一整夜可以做原本项目以外的任何事。

自上而下的产品计划，对公司的整体发展方向很有必要，但是无法涵盖更接地气儿的工程师的各种想法。只要员工对他们的20%时间负责，专注于最有影响力的变化，这些工程会有长足的进步。对工程师和设计师而言，没有官方的20%时间，仍然可以实现他们的疯狂想法，但是要难很多，醉心于此的人不得不找周末或者假期实现它。


9. 建设学习和持续改进的文化
学习和充分质疑是心理学教授Mihaly Csikszentmihalyi称之为“flow“的状态的要求之一，在这种状态下，一个人完全专注于他们正在做的，并只对他们感兴趣，这时，他甚至忘记了时间。”flow“的另一个要求是快速迭代提供的直接的立即的反馈回路。

周末的技术交流为工程师提供论坛，可以分享他们的设计，他们正在做的东西。创造机会，让工程师对他们做的东西感到骄傲，并学习更多他们现在工作之外的东西。诸如，邮件服务是如何工作的，如何改变搜索服务的排名，这样的内部文档使工程师学习和开拓新东西，很好的和20%时间相辅相成。在Quora，我们开了一个内部的Quora，在这里可以问产品和技术相关的问题。

构建学习文化的一个方面是关注指导和培训，保证每个人有基本的算法，系统，产品技能。团队越大，越要花多的精力做招聘（特别是校招），越要花精力指导和培训。在新人入职的头4周，一个指导人每天花费1小时指导工作似乎是一种负担，但是这点时间连一年花在招聘上的时间的1%都不到，却对一个人能否成功起着重要影响。


10. 招聘最好的
招聘最好的是上面其它措施的基础。如果你认为一个人是B-level的工程师，你很难对他产生尊重。如果你不相信一个人的产品直觉，你很难给他产品开发上的自主权。没有足够的工程经验，很难建立正确的抽象。如果没有其它聪明人质疑你的主意，驱动你朝着简洁方向，很容易陷入构建复杂东西的陷阱。

硅谷有句乔布斯创造的格言，“A players hire A players. B players hire C players"。关注招聘并雇佣对的人很难，但对工程师组织的成长影响巨大。Yishan Wong，前facebook的工程师管理人员，指出，招聘是工程师组织的头等大事，不止对管理者，对所有人都如此。他还非常正确的指出，“招聘最好的”和“招聘你面试过的最好的”的不同。

在Ooyala早期，我们被入境客户的工作弄的疲惫不堪，我们几乎要屈服了，想通过降低标准雇佣更多的人来帮我们完成工作。我很高兴我们没有，烂代码积累的技术债，团队的弱工程师会不停伤害团队和产品。

建立好的工程师文化需要很多工作，但因此造就的工作环境值得这样做。
