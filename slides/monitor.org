#+Title: 监控系统介绍
#+Author: 郑志勇

#+OPTIONS: num:nil toc:nil
#+REVEAL_HLEVEL: 2
#+REVEAL_THEME: black
#+REVEAL_TRANS: none
#+REVEAL_EXTRA_CSS: ../reveal.js/css/local.css

* 议题
- 使命和愿景
- 何为透明
- 两个例子

* 使命和愿景
- 使命：让天下没有难查的BUG
- 愿景：系统运行透明化，可监，可控

#+BEGIN_NOTES
理论上讲：现在有什么不重要，该有什么才重要。
实践上讲：这些都不重要，用户需求才最重要。

符合使命和愿景的，都可以做，如果用户正好有需求，优先做。纵然不能做，也可以输出我们的方法论。
#+END_NOTES

* 何为透明
** 使用监控的基本模式
- 收集数据 |-> 定义指标 |-> 报警 |-> 查看趋势 |-> 排查问题 |-><-|
- 查看业务指标 http://slo.sogou
- 查看个人任务 http://slo.sogou/alert/me.html

** 如何观察系统
- 单步调试
- 日志，接口，profile等
- /proc/<pid>，tcpdump，pstack，strace等
- netstat，top，free，df，iostat等

信息足够吗？内容全面吗？聚合方便吗？异常能报警吗？什么算异常？

#+BEGIN_NOTES
分布式环境下，如何从业务视角关注服务质量？在微服务崛起的背景下，如何观察服务栈的异常对业务的影响？
目前支持，日志，程序接口、脚本输出，机器状态、程序状态，服务API（黑盒）等方式采集数据

可以从程序日志中抽取指标，目前支持ob，grep，nginx三种方式。
机器状态，包含硬件，cpu，内存，网卡，全体进程等。程序状态包括cpu，内存，文件描述符等。
#+END_NOTES

** 如何定义、发现异常、查看趋势
- 默认的系统监控
- 白盒监控
- 黑盒监控

#+BEGIN_NOTES
默认的系统监控包括，机器硬件，存活，负载，cpu，内存，磁盘，进程数量等。

目前有单机的系统趋势图，集群的系统和白盒趋势图，黑盒趋势图可以看，甚至可以自定义grafana趋势图
#+END_NOTES

* 两个例子

** 成功的监控 slo.sogou
1. 配置数据收集（nginx）
2. 定义指标（nginx 请求量，nginx响应时长）
3. 收到报警，响应时长超过100ms
4. 借助请求量，响应时长，系统趋势（cpu），排查原因

** 失败的排查 pingmesh
1. 偶然观察到接口非常慢，稳定复现（无报警）
2. 指标观察不出异常
3. 利用pprof观察耗时分布
4. 添加日志，发现BUG，问题解决

#+BEGIN_NOTES
目前监控的问题：只能报出趋势，没法报出具体问题，更没法辅助定位问题。
#+END_NOTES
