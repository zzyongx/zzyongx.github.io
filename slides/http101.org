#+Title: HTTP 101
#+Author: 郑志勇
#+Email: zhengzhiyong@sogou-inc.com

#+OPTIONS: num:nil toc:nil
#+REVEAL_HLEVEL:3
#+REVEAL_THEME: black
#+REVEAL_TRANS: none
#+REVEAL_EXTRA_CSS: ../reveal.js/css/local.css

* HTTP/1.1 简介
- 基于TCP的应用层协议
- 文本协议
- 请求应答模式
- 无状态

* 何为协议
- 协议是约定
- 用于异构系统通信
- 协议是用来遵守的
- 不遵守是普遍存在的

* HTTP协议
- 请求方法
- 请求PATH和QueryString
- 响应状态码
- 请求/响应 Header
- 请求/响应 Body
- Header用来描述协议元信息，Header Name不区分大小写

** Chrome Developer Tools
[[../images/http101/http-get.png]]

** curl
[[../images/http101/http-put.png]]

** tcpdump
[[../images/http101/http-tcpdump.png]]

** HTTP协议组成
#+BEGIN_EXAMPLE
METHOD PATH[?QUERY_STRING] HTTP_VERSION
REQ_HEADER_NAME_1: REQ_HEADER_VALUE_1
REQ_HEADER_NAME_2: REQ_HEADER_VALUE_2

[REQ_HTTP_BODY]
HTTP_VERSION HTTP_STATUS_CODE HTTP_STATUS_MESSAGE
RESP_HEADER_NAME_1: RESP_HEADER_VALUE_1
RESP_HEADER_NAME_2: RESP_HEADER_VALUE_2

[RESP_HTTP_BODY]
#+END_EXAMPLE

** 文本协议的妙处
[[../images/http101/cat-nc.png]]

** HTTP 方法
| 方法   | 语义 | 备注                     |
|--------+------+--------------------------|
| GET    | 查   | 可缓存，不改变服务端状态 |
| POST   | 增   | 不幂等                   |
| PUT    | 改   | 类似POST，幂等           |
| DELETE | 删   | 请求无BODY               |

* 重要的HTTP HEADER
- 控制数据格式，压缩
- 控制缓存
- 保持状态
- 安全提示

** Connection（REQ）
取值 ~close~ 或 ~keep-alive~

keep-alive HTTP请求结束，TCP连接不关闭

区别于TCP的KeepAlive

** Host （REQ）
请求的主机名，多用于虚拟主机

** Accept（REQ）
客户端用来表明自己支持的（或需要的）数据格式。多用于服务端可以提供多种格式时。

例如：
- ~Accept: image/webp,*/*~ 服务端可以知道客户端支持webp格式
- ~Accept: application/json~ 服务端需要返回json格式的数据，且只能返回json

** Content-Type
表明Body的数据格式

例如：
- 常见的Req Content-Type: ~application/x-www-form-urlencoded~ ~multipart/form-data~ 等
- 常见的Resp Content-Type: ~application/json; charset=utf-8~ ~text/html; charset=utf-8~

这里charset用来表明使用的字符集

** Content-Length 或 Transfer-Encoding（RESP）
- 已知Body大小时，用Content-Length，多用于静态资源
- 未知Body大小时，用 ~Transfer-Encoding:chunked~, 多用于动态资源

** Accept-Encoding（REQ） 和 Content-Encoding
- Accept-Encoding 用于表明客户端是否支持压缩以及压缩的类型
- Content-Encoding 表明响应的压缩类型

例如：
- Accept-Encoding: gzip, deflate, sdch, br
- Content-Encoding: gzip

** Cookie
HTTP是无状态协议，使用cookie来记录两端的状态，例如记录登陆态。开发中的注意事项：
- cookie设置为 HttpOnly
- cookie的名字要独一无二，尤其是子域和域的cookie绝对不能用相同的
- cookie是客户端保存的，服务端控制力弱
- 服务端查找用户cookie，模拟用户请求，用于测试和复现问题

* XSS 和 CSRF
** XSS
依赖浏览器，浏览器不严格区分数据和代码，通过在数据中加入代码，浏览器加载页面时执行代码。预防方法是检查输入数据，过滤掉代码部分或者破坏代码部分（例如，半角转成全角）

预防XSS时需要考虑数据除了在浏览器端，还可能在移动端APP展示。

** CSRF
诱导用户打开链接获益。例如：利用诱导用户打开转账链接（如果GET请求就可以转账的话）。预防方法是，GET方法只读取数据，POST方法忽略querystring的key-value，PUT、DELETE方法只能用AJAX请求，由于SOP，CSRF攻击无效。

** SOP 和 CORS
- 都是浏览器的行为
- SOP  Same-origin policy 不允许AJAX访问不同源的资源
- CORS Cross-Origin Resource Sharing 服务器可以配置提示浏览器可以访问

* 抓站攻击
- 模拟客户端，调用服务端接口，消耗服务端资源（短信，缓存等）
- 除了IP，服务端对客户端一无所知
- 借助验证码，判断客户端是人还是其它，但验证码可以被破解
- 借助统计，机器学习区分客户端是人还是其它

* HTTP 缓存
** 客户端缓存
- 各个浏览器行为不一样
- F5刷新 vs Ctl-F5刷新
- 浏览器区分主资源和子资源

*** 默认缓存
- 没有显式指定缓存
- 有Last-Modified Header
- 缓存时长（现在时间-Last-Modify时间）* 10%，文件越老缓存越长
- 多见于静态文件

*** Cache-Control
- 优先于Expires
- 相对时间，可以防止集中过期
- 控制更灵活
- 范例1：max-age=0, no-cache, no-store, private
- 范例2：max-age=300, public
- WEB框架（如Spring）默认不缓存

*** Expires
- 绝对时间
- 范例1：0
- 范例2：Mon, 27 Feb 2017 05:08:53 GM

** Cdn、Proxy 缓存
- 静态资源
- public的动态资源
- 缓存的失效同浏览器
- 缓存的强制失效
- 缓存的命中率
- 使用tmpfs

** Web服务器缓存
- 场景技术：Redis Memcached
- 缓存粒度、时间
- 缓存失效
- 缓存命中率
- 根据内容使用缓存分区（分别LRU，命中率）

* Restful 风格
- HTTP-Method 表示动作
- PATH 表示资源，资源应该是名词

* HTTPS
- 基于SSL的HTTP协议
- 有效预防各种攻击（DNS劫持、网络窃听、网络钓鱼）
- SSL连接建立很慢

除了证书额外花钱外，HTTPS连接建立慢是其一大劣势

* HTTP 优化
- 使用多级缓存
- 使用压缩
- 共享域名，统一资源多个域名访问
- 减少请求数量，（JS、CSS、图片合并）

* HTTP/2
- 用于HTTPS
- 单一连接
- PIPELINE
- 二进制协议
- 依赖于浏览器和web服务器

** 请求应答和Pipeline
- 请求应答：请求1（等响应）响应1，请求2（等响应）响应2
- pipeline：请求1、请求2，请求3，等响应，响应1，响应2，响应3

** HTTP/2 如何提升性能
- 单一连接提升HTTPS性能
- pipeline提升http性能

** HTTP/2 性能和网络关系（来自NGINX公司）
- 在RTT小于20ms时，HTTP/1.x 和 HTTP/2差别不大
- RTT在30ms和250ms之间时，HTTP/2小胜
- RTT大于250ms时，HTTP/1.x有优势

* HTTP服务器
- 理解HTTP协议
- 把HTTP请求转成服务器内部数据结构
- 把内部数据结构按需弄成另外的数据结构
- 把另外的数据结构转成HTTP响应输出

** 极简HTTP服务器
#+BEGIN_SRC bash
while (true); do cat ~/rootproxy | nc -l 9000; done
#+END_SRC

可以用来模拟接口服务器做自动化测试

* HTTP调试
| 阶段      | 工具          | 重点关注   |
|-----------+---------------+------------|
| 输入      | curl，tcpdump | 请求Header |
| WEB服务器 | jdb，各种Log  |            |
| 输出      | tcpdump       | 响应Header |

** tcpdump 查看输入输出
~tcpdump -nn -i any -p tcp and port 9001 -A -s0~

** curl
模拟输入 path，querystring， header，body等
例如： ~curl -X PUT 'dev/api//bg/order/809,810/selfexp' -d 'address=12&time=12' -H "Cookie: token=31415949:yYtgvRVHYg5Vd"~

** 问题排查举例
- 深刻理解HTTP请求的内涵，尤其是Header
- tcpdump 查看HTTP请求的输入输出
- curl 模拟请求

*** 使用Header控制数据压缩
- 使用 nginx-lua-capture 请求后端，返回JSON数据
- 测试环境正常，线上无法解析JSON
- tcpdump 发现线上返回的数据是乱码，Header =Content-Encoding:gzip= 表明是压缩
- 请求增加 Header =Accept-Encoding: ""= 表明自己不想要服务端压缩
- 返回未压缩JSON，问题解决

*** 使用Header控制返回的数据格式
- RestTemplate 无法将JSON响应转成对象
- {"code": 401, "message": "Unauthorized"} 和 "{\"code\": 401, \"message\": \"Unauthorized\"}" 的区别
- 应该返回前者，并且curl的确返回前者，但tcpdump发现RestTemplate返回的是后者
- curl请求的Accept Header是 =*/*=, 而RestTemplate请求的Accept Header是 =application/json; */*=
- curl响应的Content-Type Header是 ~text/plain; charset=UTF-8~ 而RestTemplate的是 =application/json=
- 服务端不遵守协议，大多数客户端（例如libcurl）也不严格，严格遵守的 RestTemplate 受到惩罚
- 修改 RestTemplate的 Accept Header为 =*/*= 问题解决

* Q/A
