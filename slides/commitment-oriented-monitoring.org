#+Title: 面向承诺的监控
#+Author: 郑志勇
#+Email: iamzhengzhiyong@gmail.com

#+OPTIONS: num:nil toc:nil
#+REVEAL_HLEVEL:3
#+REVEAL_THEME: black
#+REVEAL_TRANS: none
#+REVEAL_EXTRA_CSS: ../reveal.js/css/local.css

* 三种redis监控，哪个好
- 监控进程存活
- 监控端口存活
- 执行GET/SET命令，监控运行结果和运行耗时

* 什么是面向承诺的监控
- 承诺是对外的，就像契约，包括功能，性能，可用性
- 关注承诺是否兑现
- 关注承诺兑现的代价
- 针对性强，工程化程度高

* 不知道承诺了什么，就不知道测试什么
- 开发，测试老承诺是否有效，新承诺是否兑现
- 重构，测试重构之前的承诺，重构后是否有效
- 线上变更，测试变更后承诺是否还能兑现
- 测试用例程序化，把承诺以某种形式固定下来
- 好系统是程序化测试了所有承诺的系统
- 可是真的知道承诺了什么吗？

* 监控的前提：系统可观察
- 承诺的兑现情况，例如：http {"code": _code_ }
- 系统的内部状态，例如：日志，JMX，管理接口
- 通过研究并深刻理解系统的配置参数挖掘内部指标

* 报警和报表
- 仅当承诺没兑现时报警
- 内部指标的监控有报表即可，避免影响真报警
- 内部指标用于预警和优化成本
- 区分现象和原因，避免头痛医头，脚痛医脚

* 改进承诺
- 彻底排查故障，有故障历史
- 故障有对应的检查清单，操作手册（最好程序化）
- 没有文档化和程序化就没有传承

* 如何衡量工作的效果
- 对外改善承诺
- 对内降低兑现承诺的成本
- 在高资源利用率和资源紧张之间平衡
