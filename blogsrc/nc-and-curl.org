#+TITLE: nc 和 curl
#+SETUPFILE: ../setup/theme-readtheorg-local.setup
#+OPTIONS: toc:nil

nc和curl是两大利器，一个用于tcp，一个用于http。这里记录一些使用经验和踩过的坑。

* nc
** 常用参数
- 无参数 连接tcp端口
- -z 探测端口是否存活，端口可以是范围，例如：6379-6400
- -w <timeout> 设置连接超时
- -l <port> 监听端口，模拟服务器
- -v 打印详细信息

** 例子：
*** 模拟http请求
=echo -e "GET / HTTP/1.0\r\nHost: zzyongx.github.io\r\n\r\n" | nc 127.0.0.1 80=

*** 文件传输
- 准备发送文件README.org =cat README.org | nc -l 8080=
- 获取文件 =nc 127.0.0.1 8080 > README.org=

*** 探测端口存活，超时1s
=nc -vz -w 1 www.sogou.com 80=

*** 扫描端口 6379-6400
=nc -vz -w 1 127.0.0.1 6379-6400=

*** 模拟服务端接口
假设要返回的数据在 response.json 中 =cat response.json | nc -l 8080= ，尤其适合tcp协议。

* curl

** 常用参数
*** -X
~-X~ 指定HTTP方法，常用的是~GET POST PUT DELETE~ ，如果不指定，默认是~GET~ 。如果指定了~-d~ 参数（或者类似--data-binary之类），则是~POST~ ，如果现实指定了~-X POST~ ，则需要~-d~ 或类似的参数。

*** -H
指定请求的Header，通常指定Host，Cookie之类。例如： ~-H 'Host: www.test.com'~ 。当我们POST数据的时候，如果数据比较大，curl可能自动加上~Expect: 100-continue~ ，如果服务端不支持这个Header，需要手动禁掉，方法是传递一个空Header ~-H 'Expect;'~  注意因为是空Header，必须用 =;= 替换 =:= 。

*** -d
~-d~ 参数用于 ~PUT~ 或者 ~POST~ 的请求Body，如果没有~-H~ 指定Header，那么默认是 ~application/x-www-form-urlencoded~
例如 ~-d 'data you want post'~ 请求body是 ~data you want post~ 更常见的形式是 ~-d 'name=foo&age=18'~ 这种querystring的形式。如果数据存在文件里，使用~-d '@/path/to/file'~ ，这里把文件~/path/to/file~的内容作为Body。

*** --data-binary
名字具有误导性，和二进制无关，作用和 ~-d~ 参数相同，只有一点 ~-d~ 参数指定文件作为上传内容时，curl会过滤换行（也可能还有别的），所以如果希望服务端读到和上传内容一样的数据，用~--data-binary~ ，此时你可能需要用~-H~ 指定~Content-Type~ 。

*** --user
用于指定basic认证的用户名和密码，例如--user name:pass

*** -vv
用于查看请求过程，包括连接的IP，请求的方法、URL、Header，响应的状态码、Header，这个是输出到标准输出的。

*** -o
指定输出的文件名

*** -Ss
-s quiet模式，不显示进度和错误信息。-S 当发生错误时，显示错误信息，两者通常一起使用

*** -f
默认http 400以上的错误，curl的退出状态是0，指定 -f，如果发生400以上的错误，$? 为 22

*** --compressed
默认请求 =Accept-Encoding= 为空，服务端响应 =Content-Encoding= 为空。如果服务端总是返回 =Content-Encoding: gzip= ，此时 curl 不会自动解压。使用这个参数发送 =Accept-Encoding: deflate, gzip= ，如果服务端返回gzip，curl可以自动解压。
如果是用libcurl编程，使用 =CURLcode curl_easy_setopt(CURL *handle, CURLOPT_ACCEPT_ENCODING, char *enc);=

*** -w
可以将http请求的一些内部细节格式化输出。例如 =curl -so /dev/null https://www.sogou.com -w "tcp:%{time_connect},ssldone:%{time_appconnect},code:%{http_code}\n"= 可以打印出连接建立时间，ssl连接建立时间，进而分析https的性能。

** 常用法
*** 请求指定的服务器
=curl http://ip/api -H "Host:domain"= ip 是指定的服务器，domain是正常请求使用的域名。
