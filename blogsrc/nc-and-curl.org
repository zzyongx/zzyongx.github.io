#+TITLE: nc 和 curl
#+SETUPFILE: ../setup/theme-readtheorg-local.setup
#+OPTIONS: toc:nil

nc和curl是做IT必知必会的，一个用于tcp，一个用于http。这里记录一些使用经验和踩过的坑。

* curl

** 参数部分
*** -X
~-X~ 指定HTTP方法，常用的是~GET POST PUT DELETE~ ，如果不指定，默认是~GET~ 。如果指定了~-d~ 参数（或者类似--data-binary之类），则是~POST~ ，如果现实指定了~-X POST~ ，则需要~-d~ 或类似的参数。

*** -H
指定请求的Header，通常指定Host，Cookie之类。例如： ~-H 'Host: www.test.com'~ 。当我们POST数据的时候，如果数据比较大，curl可能自动加上~Expect: 100-continue~ ，如果服务端不支持这个Header，需要手动禁掉，方法是传递一个空Header ~-H 'Expect:'~

*** -d
~-d~ 参数用于 ~PUT~ 或者 ~POST~ 的请求Body，如果没有~-H~ 指定Header，那么默认是 ~application/x-www-form-urlencoded~
例如 ~-d 'data you want post'~ 请求body是 ~data you want post~ 更常见的形式是 ~-d 'name=foo&age=18'~ 这种querystring的形式。如果数据存在文件里，使用~-d '@/path/to/file'~ ，这里把文件~/path/to/file~的内容作为Body。

*** --data-binary
名字具有误导性，和二进制无关，作用和 ~-d~ 参数相同，只有一点 ~-d~ 参数指定文件作为上传内容时，curl会过滤换行（也可能还有别的），所以如果希望服务端读到和上传内容一样的数据，用~--data-binary~ ，此时你可能需要用~-H~ 指定~Content-Type~ 。

*** --user
用于指定basic认证的用户名和密码，例如--user name:pass

*** -vv
用于查看请求过程，包括连接的IP，请求的方法、URL、Header，响应的状态码、Header，这个是输出到标准输出的。

** 请求Header
通过查看请求Header，可以知道我们指定的参数是否正确，请求是否正确。例如：Content-Length 可以知道发送的数据大小对不对。很多Header做测试很方便。

*** Host
请求的Host，如果请求的URL中地址是IP，可能需要指定Host。

*** Content-Type
请求的内容类型，规范的程序中，这个很关键，因为服务端根据Content-Type解析收到的数据。

*** Content-Length
请求的数据长度

*** Accept
客户端接收什么Content-Type的数据，服务端根据客户端的能力，来返回不同的数据。例如 ~Accept: text/html,image/webp~ 中的webp表明客户端接收webp格式的图片，就可以返回图片的webp形式，节省带宽。如果Accept中没有这个，服务端可能就返回jpg的了。可以用来测试服务端。

*** Accept-Encoding
客户端接收的数据压缩格式。可以测试服务端配置的压缩是否生效，也可以服务端用来探测客户端能力。例如 ~Accept-Encoding:gzip, deflate, sdch~ 中表明客户端接收gzip压缩、sdch压缩。sdch压缩时google发明的，可能只有chrome浏览器支持。服务端可以根据这些数据，判断返回数据是否压缩，以什么格式压缩。


