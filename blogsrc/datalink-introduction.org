#+TITLE: datalink 简介
#+SETUPFILE: ../setup/theme-readtheorg-local.setup
#+OPTIONS: toc:nil

datalink主业是监控， 但又不局限于监控，它更像是一套业务稳定促进系统，它立足于发现问题，并辅助解决问题。

* datalink 的应用范围
1. 基础监控覆盖公司所有服务器（4万+）
2. 公司容器平台（包含GPU平台）（+，增长中）
3. 业务监控()
4. PAAS平台（接入平台，RDS，redis，dfly等）

* datalink 的核心功能
1. 监控，核心是可观察性，并24小时值守。（发现问题）
2. 辅助根因分析。（分析原因）
3. 辅助问题修复。（解决问题）
4. 稳定性相关功能。
5. 开放数据平台。

* 监控-核心的核心
1. 监控agent，数据之源
2. UI，难用等于没用
3. 白盒监控，过犹不及
4. 黑盒监控，最后的防线
5. 服务稳定性，一目了然

** 监控agent，数据之源
监控agent的定位是，凡人工做能及的可观察性指标，均可metrics化，此外metrics的采集同时，尽可能生成根因数据，用于故障排查。主要包括：

*** 系统指标
包括linux系统指标和k8s系统指标。 **补充指标数量

linux部分主要来自node_exporter，硬件问题（磁盘，cpu，内存，网卡等），系统问题（dmesg， =/var/log/message= 等)，GPU等自己开发。

k8s部分基于cadvisor和k8s自带的metrics，并增加额外标签，用于打通各种数据。此外pvc，gpu等数据自己开发。

*** 进程
包括进程的cpu，内存，启动，fd数量等。特定进程的数据和整体进程的数据，汇总采集。其余落在本地盘，作为进程快照，用于问题排查。

除了通过进程存在判断存活，还支持主动请求进程的接口，用于探测存活，确认进程有效存活。

除了metrics，监控agent还可以做进程管理，core文件管理等。

*** 日志
可以把日志转成metrics，包括任意日志，结构化日志（包括nginx类和OB类），计算是实时、流式的。部分日志被抽取，作为根因日志。

*** 自定义脚本
执行用户脚本，把标准输出转化成metrics，错误输出转成根因日志。

*** 用户自定义metrics
从用户提供的接口、文件中获取metrics。这种方式看似标准，却容易割裂metrics和根因之间的关联。
TODO：支持 # ROOTLOG 注释，用于关联根因

用户主动调用agent接口，上报metrics，支持同时上报根因。


** UI
1. 个人面板，待处理告警一目了然
2. 模板，尽量标准化，有限差异化（类似class的继承、覆盖）
3. 团队，值班、报警升级等
4. 趋势图，向grafana学习
5. 服务稳定性面板（doing）

** 白盒监控
监控agent采集的指标

** 黑盒监控
模拟用户视角请求服务，这时最低限度的可用性。优点是真实，缺点是片面，只能模拟关键用户行为。监控agent支持黑盒监控。

** 服务稳定性
基于部分关键的白盒监控和黑盒监控，可用聚合出服务稳定性指标，用以反映服务的稳定性。（优化中）

* 辅助根因分析
** 根因日志
监控agent能够抽取异常日志，当报警时，查看关联的日志，快速定位问题。

** 上下游报警
报警是能够查看业务上下游（基于网络流向自动发现）的报警，找出可能原因。

** 日志检索
集中检索业务机器上的日志。

** 进程快照
多用于问题排查。

TODO：增加事件（dfly上线事件，网络变更事件，paas平台变更等等）功能，定位故障。

* 辅助问题修复
1. 自动报障系统。某些告警自动触发报障。
2. 一键调用故障修复脚本。（回滚，重启等操作）。

* 稳定性相关功能
1. 日志rotate
2. 增强的crontab

* 开放数据平台
开放主要包括，数据自身和数据接口标准化。

应用案例：
1. 公司的服务器成本分析
2. 营销某部直接从监控agent采集数据
3. 搜索某部基于agent接口返回的系统指标做调度

TODO：主要服务于业务监控的指标，转化为业务运营的指标

* 增加和（运维）开发团队的互动 TODO
快速恢复是降低故障时间的关键，增加更多的手段以提升故障排查效率。

* 报警分析 TODO
目标
1. 提升报警信息有效性，降低噪音（10小时1000条）
2. UI
