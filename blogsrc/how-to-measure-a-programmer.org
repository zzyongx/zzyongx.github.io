#+TITLE: 如何评价一个程序员
#+SETUPFILE: ../setup/theme-readtheorg-local.setup
#+OPTIONS: toc:nil

我相信，沟通高效、思维敏捷、逻辑清晰、执行力强，这些都是非常宝贵的品质，也能够感同身受。但是，终究不够量化，还是需要工作上的成绩来体现，那么如何衡量工作上的成绩？

* 线上代码的正确性和稳定性
业务的正确性和稳定性永远是第一位的，如果程序员的代码经常导致业务错误和不可用，那么他的所有优点立马化为乌有。在明确是代码的问题后，还需要关注他是否做了努力来避免问题。代码的正确性和稳定性由如下手段保障：

** 程序员自测
程序员写代码测试API保障程序正确，注意是写代码测试，这保障了测试可重复和可自动化。如果写了大量的有效（所谓有效，指尽量模拟真实场景）测试代码，仍然漏掉了某些情况，是值得原谅的。

** 重要业务需要专门测试介入
自测充分后，如果业务对正确性要求极高，需要专门的测试介入。程序设计需要对测试友好，比如测试数据的支持。

测试是事前保证，对用户没有影响。故障的发现和恢复属于事后挽救，不良后果已经产生，果断止损把影响降低到最小。越早发现，修复越快，影响也越小。

** 快速精准发现问题
尽量把错误码（返回给用户）细化，把内部错误（用户无感）暴露出来，监控到这些错误，及时告知开发。

** 程序必须可以回滚
上线时必须考虑回滚的可能，必须支持回滚。例如：新旧程序API兼容，数据格式（数据库，缓存等）兼容，不兼容的有版本区分。有时候需要前后端代码一起回滚。

最好一次上线一个功能，降低故障影响和回滚难度，如果是版本升级，功能太多，事前测试一定要充分。如果事前测试充分（简单粗暴的使用覆盖度和测试代码行数衡量），那么故障不会发生，如果事后挽救及时，那么故障影响会尽量降低。程序员要关注上述四个环节，如果都尽力了，并不能苛求太多。

* 能正确评估工作的重要性和优先级
程序员往往对重要性的理解有误，认为代码才是重要的。业务和业务的稳定才是重要的。以业务的重要性衡量工作的优先级和重要性，以业务的受影响程度衡量BUG的优先级和重要性。

* 代码的干净整洁
没有多余代码，无用的代码被删除。可能有用，但现在没用的代码，不应该出现在代码主分支，可以使用自己的私有分支保留这些。

* 代码的易读性
逻辑应该简单直白。例如： ~Set<String> DAYS = Stream.of("2017-04-01").collect(Collectors.toSet());~ 就不如 ~Set<String> DAYS = new HashSet<>(Arrays.asList("2017-04-01"));~
除非业务需要，设计应该简单。例如：ID的设计，数据库保证了 *UNIQUE* ，就该直接 *INSERT* ，等数据库报错，再随机生成新的，而不是 *INSERT* 前 *SELECT* 一下。
