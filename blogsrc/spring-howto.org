
#+TITLE: Spring Web Develop HOWTO
#+SETUPFILE: ../setup/theme-readtheorg-local.setup

* 前言
2015年10月以前，我做c，c++，perl，lua开发，一直崇尚简洁。虽然很早就读过 thinking in java，但是一直没有涉足java开发，java给我两个感觉，一是笨重，而是庞杂，这里面有各种框架的功劳，看到诸多形形色色的框架，就不寒而栗。

2015年10月以后，终于不得不接触java开发，首当其冲的就是spring。一开始就被各种概念整懵了，IOC，DI，AOP，完全搞不懂这些东西是干啥的，也不知道引入它们的目的。徘徊了一个月，终于恍然大悟，spring其实很简单，如果有人点拨，学习spring的过程不至于这么曲折。随后，面试了一些java开发者，发现大家都知道spring，但是对spring的理解和使用都比较肤浅。本文试图由浅入深的讲解spring的本质是啥，如何最大限度的利用spring。

本文基于Spring4，主要讲解Rest风格的编程，不涉及到View部分。本文也不求面面俱到，只求领人入门，有更复杂的需求，尽可以翻看文档，Spring不会让你失望，只有想不到，没有做不到。

* Spring 解决什么问题

** 框架的作用
框架五花八门，无处不在，框架解决的问题各式各样，但从编程实践的角度来看，框架是为了让程序更优雅。

*** 框架消除重复代码

*** 框架消除相似代码

框架是一种抽象，抽象层次越高，上述好处越多，当然，可能相应的灵活性就少很多。

** 程序是什么
这个问题似乎太简单，但一时又不知从何说起。先看个简单的程序，hello.pl
#+BEGIN_SRC perl
#!/usr/bin/perl
my $name = shift || "friend s";
print "hello $name\n";
#+END_SRC

#+BEGIN_SRC sh
$ ./hello.pl spring
hello spring
#+END_SRC

这个程序异常简单，它接受字符串，输出字符串。那么复杂的程序呢？我们考虑http服务器，比如jetty，它的输入输出是什么？

#+BEGIN_EXAMPLE
# curl http://dev/api/login?jsonp=x -vv
> GET /api/login?jsonp=x HTTP/1.1
> User-Agent: curl/7.41.0
> Host: dev
> Accept: */*
>
< HTTP/1.1 200 OK
< Server: nginx/1.8.0
< Date: Thu, 31 Dec 2015 02:43:19 GMT
< Content-Type: application/javascript
< Transfer-Encoding: chunked
< Connection: keep-alive
< X-Content-Type-Options: nosniff
< X-XSS-Protection: 1; mode=block
< Cache-Control: no-cache, no-store, max-age=0, must-revalidate
< Pragma: no-cache
< Expires: 0
< X-Frame-Options: DENY
<
/**/x({"code":400,"message":"bad request","data":{"password":"password is required"}});
#+END_EXAMPLE

这里我们用curl模拟http请求， ~输入点~ 包括
- HTTP Method，这里是 ~GET~ ，此外常用的还有 ~POST PUT DELETE~
- 请求 ~url~ ，包括 ~path~ 这里是 ~/api/login~ ，和 ~querystring~ ，这里是 ~jsonp=x~ , ~querystring~ 是可选的
- 请求 ~header~ ，例如 Host，Accept，有些header比其它header要重要一些，比如cookie。
- 请求 ~body~ ，这里body为空，一般请求 ~POST PUT~ 才需要body。

~输出点~ 包括：
- HTTP code，这里是 ~200~。
- 响应 ~header~ ，例如 Content-Type
- 响应 ~body~ ，这里是 /**/开头的行

上面的 ~输入~ 通过 ~tcp~ 协议传送给jetty，jetty通过 ~tcp~ 协议将 ~输出~ 回传给用户。这里针对输入和输出的规定，构成了 ~http~ 协议的内容， ~http~ 协议并没有规定输出 ~body~ 的格式。

从简单的 HelloWorld，到复杂的Web应用，程序的功能，无非都是解析输入，产生输出。程序使用程序语言编写的，程序语言规定了数据类型（结构），程序中的逻辑都是通过操作程序支持的数据类型实现的。我们需要在程序开始时，把输入转成程序语言支持的数据类型，在程序结束时，把程序语言支持的数据类型转成响应的输出。

对 HelloWorld 而言， ~输入点~ 很简单，是一个命令行参数，对Web应用而言， ~输入点~ 就复杂很多，如何把 ~输入点~ 的数据转成编程语言支持的数据类型，正是框架做的事情。

除了数据转换，框架还提供了机制，可以校验数据有效性。

** 程序

* Spring 如何抽象输入和输出

** 基于原生的Servlet如何编程
Servlet是一套标准，java开发者可以使用它开发WEB应用，运行Servlet的web服务器称为Servlet容器，常见的Servlet容器有jetty，tomcat等。

#+BEGIN_SRC java
public class HelloWorld extends HttpServlet 
{
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException {
    String name = request.getParameter("name");
    response.setContentType("text/html");

    // Actual logic goes here.
    PrintWriter out = response.getWriter();
    out.println("<h1> Hello " + name + "</h1>");
  }
}
#+END_SRC

除了上述函数，我们还需要在 web.xml 配置url和处理函数的对应关系
#+BEGIN_SRC xml
<servlet>
   <servlet-name>HelloWorld</servlet-name>
   <servlet-class>HelloWorld</servlet-class>
</servlet>

<servlet-mapping>
   <servlet-name>HelloWorld</servlet-name>
   <url-pattern>/HelloWorld</url-pattern>
</servlet-mapping>
#+END_SRC

这个过程非常直观，Servlet容器收到WEB请求，根据url和web.xml的配置，选择相应的处理类处理。使用 ~HttpServletRequest HttpServletResponse~ 表示输入和输出，这个抽象层次太低了，本例中为了获取 ~querystring~ 中的name参数，需要调用相应的函数。如果可以直接把 ~querystring~ 中的name参数绑定到一个 *String类型的变量* 抽象层次就高很多。

另外url和url处理类在不同的地方，不能一眼看出url的处理逻辑。

** Spring 对输入的抽象

Spring提供了非常简单的机制，将 ~输入点~ 的数据转成java支持的数据类型， ~long String List class~ 等。
- 通过 ~RestController~ 和 ~RequestMapping~ 将 url 映射到具体的处理函数
- 通过 ~PathVariable~ 和 ~RequestParam~ 将url的内容和querystring映射到java变量
- 把 querystring 映射成java对象
- 通过 ~RequestHeader~ 把 ~header~ 的值映射为java变量

此外可以组合使用上述方法。如下代码将详细讲述映射（绑定）是如何发生的。

#+BEGIN_SRC java
@RestController
@RequestMapping("/api")
public class EchoController {

  public static class Profile {
    @NotBlank(message = "name is required")
    public String name;

    @Pattern(regexp = "\\d{11,15}", message = "phone is required")
    public String phone;

    public List<String> favoriteColor;

    @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    @JsonSerialize(using = LocalDateTimeJsonSerializer.class)
    public LocalDateTime birthday;

    public void setName(String name) {
      this.name = name;
    }
    public void setPhone(String phone) {
      this.phone = phone;
    }
    public void setFavoriteColor(List<String> color) {
      this.favoriteColor = color;
    }
    public void setBirthday(LocalDateTime birthday) {
      this.birthday = birthday;
    }
  }

  // OptionalLong is not support now, use Optional<Long> instead of
  // curl dev:8180/api/power/5
  // curl dev:8180/api/power/5/3
  @RequestMapping(value = {"/power/{base}", "/power/{base}/{power}"}, method = RequestMethod.GET)
  public long getPower(@PathVariable long base, @PathVariable("power") Optional<Long> powerOpt) {
    long power = powerOpt.orElse(2L);
    return (long) Math.pow(base, power);
  }

  // curl dev:8180/api/upper/hello
  // curl dev:8180/api/upper?qs=world
  @RequestMapping(value = {"/upper", "/upper/{upper}"}, method = RequestMethod.GET)
  public String getUpper(
    @PathVariable Optional<String> upper,
    @RequestParam(required = false, defaultValue = "Hello world") String qs) {
    if (upper.isPresent()) return upper.get().toUpperCase();
    return qs.toUpperCase();
  }

  // curl dev:8180/api/books -H "Accept: text/plain"
  @RequestMapping(value = "/books", produces = "text/plain")
  public String getBooksText() {
    return "Mastering Spring MVC,Spring in Action";
  }

  // curl dev:8180/api/books
  @RequestMapping(value = "/books")
  public List<String> getBooks() {
    return Arrays.asList("Mastering Spring MVC", "Spring in Action");
  }

  // curl -X PUT dev:8180/api/profile -d '{"name": "zzyong", "phone": 12345678901}' -H "Content-Type: application/octet-stream"
  @RequestMapping(value = "/profile", method = RequestMethod.PUT,
                  consumes = "application/octet-stream")
  public void submitProfile(HttpServletRequest request, HttpServletResponse response)
    throws IOException {
    InputStream input = request.getInputStream();
    OutputStream output = response.getOutputStream();

    byte[] buffer = new byte[512];
    int n;
    while ((n = input.read(buffer)) > 0) {
      output.write(buffer, 0, n);
    }
  }

  // curl -X PUT dev:8180/api/profile -d '{"name": "zzyong", "phone": 12345678901}' -H "Content-Type: application/json"  
  @RequestMapping(value = "/profile", method = RequestMethod.PUT, consumes = "application/json")
  public String submitProfileJson(@RequestBody String json) {
    return json;
  }

  // curl -X PUT "dev:8180/api/profile" -d 'name=zzyong&phone=12345678901&favoriteColor=red,green' -vv
  // Content-Type: application/x-www-form-urlencoded
  // curl -X PUT "dev:8180/api/profile" -F 'name=zzyong' -F 'phone=12345678901' -F 'favoriteColor=red,green' -vv
  // Content-Type: multipart/form-data; boundary=------------------------c00a4e11cd9e4e67
  @RequestMapping(value = "/profile", method= RequestMethod.PUT)
  public ResponseEntity submitProfileForm(@Valid Profile profile, BindingResult bindingResult) {
    if (bindingResult.hasErrors()) {
      Map<String, String> map = new HashMap<>();
      for(FieldError error : bindingResult.getFieldErrors()){
        map.put(error.getField(), error.getDefaultMessage());
      }
      return new ResponseEntity<Map>(map, HttpStatus.BAD_REQUEST);      
    } else {
      return new ResponseEntity<Profile>(profile, HttpStatus.OK);
    }
  }

  // curl "dev:8180/api/profile" -H "user: bob" -H "password: secret" -vv
  // curl "dev:8180/api/profile" -H "Cookie: uid=btxaergfe" -vv
  @RequestMapping(value = "/profile", method = RequestMethod.GET)
  public Profile getProfile(
    @CookieValue("uid") Optional<String> uid,
    @RequestHeader("user") Optional<String> user,
    @RequestHeader("password") Optional<String> pass) {
    Profile profile = new Profile();
    profile.name = "bob";
    if (uid.isPresent() || (user.isPresent() && pass.isPresent())) {
      profile.phone = "31415926535";
      return profile;
    } else {
      return profile;
    }
  }

  // curl dev:8180/api/x/100;name=apple;color=red/y/200;name=orange
  @RequestMapping(value = "/x/{x}/y/{y}")
  public Map coordinateProfile(
    @PathVariable int x, @MatrixVariable(pathVar = "x") Map<String, String> xCnf,
    @PathVariable int y, @MatrixVariable(pathVar = "y") Map<String, String> yCnf) {
    return new HashMap<Integer, Map>() {{
      put(x, xCnf);
      put(y, yCnf);
    }};
  }
}

#+END_SRC

*** RestController
通过RestController标注， ~EchoController~ 中相应的函数会成为相应url的处理函数。

*** RequestMapping
当RequestMapping用来标类时，相应的path成为该类中，所有url的前缀，本例中所有url都自动加 /api 前缀。
RequestMapping 常用参数如下：
- value 指定url，可以指定多个，如 ~getPower~ 和 ~getUpper~
- method 指定 HTTP 方法，默认不限制
- produces 指定 Accept，只有Accept符合的请求才接受
- consumes 指定 Content-Type，只有Content-Type符合的请求才接受

当同一个url可以产生多种格式的输出时，请求通过 ~Accept~ 头指定接受的格式，选择匹配的 ~produces~ 处理函数，产生相应输出。

例如，指定 ~Accept~ 只接受文本格式时，/api/books 返回逗号分隔的字符串，默认返回json。
#+BEGIN_SRC sh
$ curl dev:8180/api/books -H "Accept: text/plain"
Mastering Spring MVC,Spring in Action

$ curl dev:8180/api/books
["Mastering Spring MVC","Spring in Action"]
#+END_SRC

当同一个url接受多种格式的输入时，请求通过 ~Content-Type~ 指定输入的格式，选择匹配的 ~consumes~ 处理函数。

例如，指定 ~Content-Type~ 为 application/json 时，可以输入原生的Json数据，而不指定可以接受任意类型。这个主要影响数据绑定，Spring支持Content-Type为 application/x-www-form-urlencoded 和 multipart/form-data 的绑定

#+BEGIN_SRC sh
$ curl -X PUT dev:8180/api/profile -d '{"name": "zzyong", "phone": 12345678901}' -H "Content-Type: application/json"
{"name": "zzyong", "phone": 12345678901}

$ curl -X PUT dev:8180/api/profile -d 'name=zzyong&phone=12345678901&favoriteColor=red,green'
{"name":"zzyong","phone":"12345678901","favoriteColor":["red","green"]}
#+END_SRC

*** PathVariable
~PathVariable~ 用于绑定url模板中的参数，它只有一个参数，用于指定变量在url模板的名字。

在 ~getPower~ 中，url模板为 {"/power/{base}", "/power/{base}/{power}"}，变量base的名字和{base}相同，而变量powerOpt和{power}不同，所以使用 ~@PathVariable("power")~ 指定模板的名字。

此外， ~RequestMapping~ 指定了两个url，power是可选的，此时可以使用Java8的新特性，Optional。虽然Java8提供了 OptionLong 作为 Optional<Long> 的优化，似乎目前spring并不支持前者。

*** ReqestParam
~RequestParam~ 用于绑定 ~querystring~ 和 ~requestbody~ 中的参数，其主要参数有
- required 指定参数是否必须，默认为ture
- defaultValue 当required为false时，指定默认值，必须是字符串串，和绑定变量的类型无关。例如 1 写成 "1"

*** CookieValue 和 RequestHeader
~CooieValue~ 用于绑定 ~Cookie~ 中的某一个， ~RequestHeader~ 用于绑定header
在 getProfile 中，用了Optional，因为这些都是可选的。

*** MatrixVariable
~MatrixVariable~ 用于获取url的某段path的选项，默认是关闭的，需要通过一个配置打开，具体来说就是创建一个 ~Bean~ 。
#+BEGIN_SRC java
@Bean
public RequestMappingHandlerMapping requestMappingHandlerMapping() {
  RequestMappingHandlerMapping r = new RequestMappingHandlerMapping();
  r.setRemoveSemicolonContent(false);
  return r;
}
#+END_SRC

~MatrixVariable~ 主要参数是一个 ~pathVar~ 用于指定相应的url模板部分，如果不指定，全部的matrix都会放到一个 ~Map~ 中去。

~MatrixVariable~ 只是请求url有所不同，并不影响 ~RequestMapping~ 的形式。例如 x/{x}/y/{y} 可以映射下面的请求

#+BEGIN_SRC sh
$ curl 'http://dev:8180/api/x/100;name=apple;color=red/y/200;name=orange'
{"100":{"name":["apple"],"color":["red"]},"200":{"name":["orange"]}}
#+END_SRC

*** RequestBody
对于 ~Content-Type~ 为 ~application/x-www-form-urlencoded~ 和 ~multipart/form-data~ 的请求，通常会把 ~requestbody~ 以key-value的形式绑定到各个变量。但有时需要获取整个 ~requestbody~ 的内容，此时可以用 ~RequestBody~ ，如 ~submitProfileJson~ 所示。

*** 绑定到对象
~submitProfileForm~ 的参数是 ~(@Valid Profile profile, BindingResult bindingResult)~ ，spring会把 ~querystring~ 和 ~requestbody~ 中的值绑定到 ~Profile~ 。假如 ~requestbody~ 是 ~name=zzyong&phone=12345678901&favoriteColor=red,green~ ，spring解析到name时，会调用Profile的 ~setName~ 函数，解析到favoriteColor时，会调用 ~setFavoriteColor~ 。注意 Profile中的相关字段，必须有set方法，仅仅是public时不够的。

除了基本的类型转换，String转long String转时间， *逗号分隔* 的字符串，也会被转成List。

*** 参数校验
使用场景参考 ~Profile~ 和 ~submitProfileForm~ ，可选的校验类型与spring无关，常见的校验
- DateTimeFormat @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
- Pattern @Pattern(regexp = "\\d{11,15}")
- NotBlank
- NotNull
- Min Max
- Size

Valid 用于校验参数的合法性，并把校验结果存放到 ~BindingResult~ 中。 例如：
#+BEGIN_SRC sh
$ curl -X PUT "dev:8180/api/profile" -d 'phone=12345678901&favoriteColor=red,green'
{"name":"name is required"}
#+END_SRC

*** 原生Servlet输入
如果上述绑定满足不了需求，仍然可以获得类似 ~Servlet~ 的参数，如 ~submitProfileStream~ 所示。

*** Spring 对 RestController 中函数原型的要求
有过 ~Servlet~ 编程经验的人，初次看到 ~RestController~ 的代码，可能会惊讶于函数签名的千奇百怪。的确，很多框架，都是要求使用者继承一个类，覆盖一些方法，或者实现一些接口，函数原型并没有选择的余地。Spring不是这样， ~RestController~ 中的函数原型是任意的，Spring会根据注解和变量类型，做正确的函数调用。

** Spring 对输出的抽象
相对输入，输出就简单很多，主要涉及到把java ~对象~ 转成 ~responsebody~ 也就是字符串。字符串自身的格式有普通文本，Json，Xml等多种选择，现在的web应用基本以Json为主。
参考以下配置，如果返回字符串，原样返回，如果其它，转成Json字符串。

#+BEGIN_SRC java
public class WebConfig extends WebMvcConfigurerAdapter {
  @Override
  public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
    /* string convert must be first */
    converters.add(new StringHttpMessageConverter());

    Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();
    builder.featuresToDisable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
    builder.featuresToDisable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
    builder.serializationInclusion(JsonInclude.Include.NON_NULL);
    converters.add(new MappingJackson2HttpMessageConverter(builder.build()));
  }
}
#+END_SRC

*** 返回String
参考 ~getUpper~ 返回值是 ~String~ ，则 ~responsebody~ 就是返回的值。
此处依赖配置 ~StringHttpMessageConverter~ 。假设返回Hello，如果没有该配置，则 ~responsebody~ 是 *"Hello"* ，而不是 *Hello* ，前者是字符串的Json形式。

*** 返回对象
参考 ~getBooks~ 和 ~getProfile~ ，无论是Java的容器，还是普通 ~类~ ，都可以自动转成合适的Json形式。

*** 控制 HttpStatus 和 HttpHeader
~ResponseEntity~ 是一个特殊的对象，返回它时不会把它自身转成Json，它自身控制了 ~Status Header Body~ ，通过相应的构造函数，控制相应的部分
- ResponseEntity(HttpStatus statusCode)
- ResponseEntity(MultiValueMap<String,String> headers, HttpStatus statusCode)
- ResponseEntity(T body, HttpStatus statusCode)
- ResponseEntity(T body, MultiValueMap<String,String> headers, HttpStatus statusCode)

T 是任意对象，会被转成Json。 ~submitProfileForm~ 就是通过 ~ResponseEntity~ 返回400的

*** 返回void，原生Servlet输出
通过 ~HttpServletResponse~ 可以控制所有输出，此时函数返回void。

*** JSONP
[[https://en.wikipedia.org/wiki/JSONP][JSONP]] 用来克服浏览器的跨域限制。通常接口返回Json数据，而JSONP返回对Json数据的函数调用。例如：
#+BEGIN_SRC sh
$ curl "dev:8180/api/books"
["Mastering Spring MVC","Spring in Action"]

$ curl "dev:8180/api/books?jsonp=display"
/**/display(["Mastering Spring MVC","Spring in Action"]);
#+END_SRC

~getBooks~ 函数并没有根据 ~jsonp~ 参数做任何特殊处理，但是带 ~jsonp~ 参数的请求返回的是函数调用，这都是Spring支持的，为了启用该支持，需要增加下面的代码。

#+BEGIN_SRC java
@ControllerAdvice
public class JsonpAdvice extends AbstractJsonpResponseBodyAdvice {
  public JsonpAdvice() {
    super("jsonp");
  }
}
#+END_SRC

*** 控制返回的Json形式
Spring提供了~Jackson2ObjectMapperBuilder~ 通过它可以配置Json序列化的参数，除此外还可以 ~JsonSerialize~ 配置序列化函数。

* 依赖注入 DI
** 如何理解DI
我的理解是，不要去理解，用就行了。可以参考 [[http://zzyongx.github.io/blogs/bluff-Ioc-DI.html][唬人的Ioc和DI]]

** 从单例到DI
一般聊到单例都是指这样一种形式 ~SingletonClass.create~ 无论这个函数调用多少次，这个函数只返回同一个对象。Spring中所有DI的类都是单例的（默认如此，但是可以改变），单例对象的值是可以使用Spring自动注入的。这个过程可以分两步：
- 构造单例表
- 注入单例对象

可以这么理解，Spring启动时，根据一定的规则，生成一个全局的 ~Map<String, Object>~ 的单例表，通过这个表来实现单例。这个表的初始化，通过以下方式完成：
- 扫描指定包，如果类带有注解 ~@Component @RestController~ 等，添加到单例表中。
- 标记为@Bean的函数创建的对象，添加到单例表中。

单例表完成后，扫描所有标记为 ~@Autowired~ 的成员变量和成员函数，根据名字查照单例表，用相应的值初始化。

** Spring DI 包括哪些组成部分
- Component     定义可以被DI的类
- Bean          创建用来DI的变量
- Autowired     需要DI的变量

** 实例讲解DI

MemoController.java
#+BEGIN_SRC java
@RestController
@RequestMapping("/api")
public class MemoController {
  @Autowired MemoManager memoManager;
  
  @RequestMapping(value = "/memo", method = RequestMethod.GET)
  public ApiResult listMemo() {
    return memoManager.list();
  }
}
#+END_SRC

MemoManager.java
#+BEGIN_SRC java
@Component
public class MemoManager {
  @Autowired JedisPool jedisPool;

  final String KEY = "memo";

  public ApiResult list() {
    try (Jedis c = jedisPool.getResource()) {
      return new ApiResult<Map>(c.hgetAll(KEY));
    }
  }
}
#+END_SRC

RootConfig.java
#+BEGIN_SRC java
@Configuration
@ComponentScan({"example"})
@PropertySource("classpath:application-${spring.profiles.active}.properties")
public class RootConfig {
  @Autowired Environment env;

  @Bean
  public JedisPool jedisPool() {
    return new JedisPool(
      env.getRequiredProperty("redis.url"),
      env.getRequiredProperty("redis.port", Integer.class));
  }
}
#+END_SRC

*** MemoController 有注入需求
~@RestController~ 默认也是单例的。我们找不到 ~MemoController~ 实例化的地方，它的成员变量 ~memoManager~ 只能通过注入的方式初始化。根据注入规则，需要名字为 *memoManager* 的对象。

*** MemoManager 提供了注入能力
根据规则，spring在启动时，发现 ~MemoManager~ 有 ~@Component~ 注解，于是名字为 *memoManager* 的对象被记了下来。当需要名为 *memoManager* 对象时，就可以使用了。

*** DI 是递归的
~MemoManager~ 也有标记为 ~@Autowired~ 的成员变量 ~jedisPool~ ，也需要注入。因为 JedisPool 是第三方库，我们使用 ~@Bean~ 标记函数的方法，提供 *jedisPool* 对象。

** 以上只是猜测
以上描述的过程都是 *不负责任* 的猜测，Spring是不是这么做的不清楚，但是这么做是肯定可以实现的。

以上的描述都假设单例表是个Map，这不一定是真的，例如 *memoManager* 需要被注入，它的类型是 *MemoManager* ，只需要根据类型就能找到相应的依赖对象。

** 给单例对象命名
本例中 *只有一个* JedisPool，隐含了只有一个Redis，假设我们有多个Redis怎么办？这时靠默认名字（小写类名的第一个字母）显然不行了。这时需要给Bean起名字，同时Autowired时指定需要的Bean的名字。
1. @Bean("redisPoolOne") 给Bean命名
2. @Qualifier("redisPoolOne") @Autowired JedisPool jedisPool 指定注入的Bean的名字。

** @Bean注解函数
上例中，无论 ~jedisPool()~ 调用多少次，返回的都是同一个对象。

** @Autowired 和静态函数、静态成员变量
~@Autowired~ 不能用于静态函数和静态成员变量

* 扔掉 XML 配置
spring有两种配置方式，一种基于XML，一种基于java代码（ ~java config~ ），最近的资料，推崇 ~java config~ 。我学习spring的时间较晚，只会后者。

** 配置什么？
- url 和处理函数的映射
- Web框架的配置
- 各种Component所在的包
- 不同环境的配置文件

** url和处理函数的映射
#+BEGIN_SRC java
public class WebInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {
  @Override
  protected Class<?>[] getRootConfigClasses() {
    return new Class<?>[] {
      RootConfig.class, DaoConfig.class
    };
  }
  
  @Override
  protected Class<?>[] getServletConfigClasses() {
    return new Class<?>[] { WebConfig.class };
  }

  @Override
  protected String[] getServletMappings() {
    return new String[] { "/" };
  }

  @Override
  protected void customizeRegistration(Dynamic registration) {
    registration.setMultipartConfig(
      new MultipartConfigElement("/tmp", 1500_000, 1500_000, 1500_000));
  }
}
#+END_SRC

上文以及说了用 ~RequestMapping~ 映射url和处理函数，这里又说需要配置，这多少令人困惑。 ~RequestMapping~ 只是告诉spring这个映射关系，但是Servlet容器并不知道，它甚至不知道Spring的存在。

在Servlet3以前需要通过XML告诉Servlet容器，url和处理函数的映射关系，在Servlet3及以后的版本，只要实现了[[http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContainerInitializer.html][ServletContainerInitializer]] 接口，Servlet容器会自动发现其实现，并做相关配置，当然Spring做了封装，配置起来更简单。

首先继承 ~AbstractAnnotationConfigDispatcherServletInitializer~ ， ~getRootConfigClasses~ 配置应用上下文，主要是一些全局配置， ~getServletConfigClasses~ 配置Servlet上下文， ~getServletMappings~ 配置对应的url。

如果需要配置多个Servlet上下文，实现多个 ~AbstractAnnotationConfigDispatcherServletInitializer~ 即可，如果需要更精细的配置，可以研究 ~AbstractDispatcherServletInitializer~ 。

** 配置Servlet上下文

#+BEGIN_SRC java
@Configuration
@EnableWebMvc
@ComponentScan({"example.api"})
public class WebConfig extends WebMvcConfigurerAdapter {
  @Override
  public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
    converters.add(new StringHttpMessageConverter());
      
    Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();
    builder.featuresToDisable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
    builder.featuresToDisable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
    builder.serializationInclusion(JsonInclude.Include.NON_NULL);
    converters.add(new MappingJackson2HttpMessageConverter(builder.build()));
  }
}
#+END_SRC

~@Configuration~ 表明这是个配置， ~@EnableWebMvc~ 启用Mvc， ~@ComponentScan~ 配置 Controller 所在的包。继承 ~WebMvcConfigurerAdapter~ 配置Web细节。

** 配置应用上下文
#+BEGIN_SRC java
@Configuration
@ComponentScan({"example"})
@PropertySource("classpath:application-${spring.profiles.active}.properties")
public class RootConfig {
  @Autowired Environment env;

  @Bean
  public JedisPool jedisPool() {
    return new JedisPool(
      env.getRequiredProperty("redis.url"),
      env.getRequiredProperty("redis.port", Integer.class));
  }
}
#+END_SRC

~@ComponentScan~ 配置 ~@Component~ 类所在的包。

** 配置文件
虽说没有了XML，可是并不能没有配置，spring支持 [[https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html][Properties]] 配置。通过 ~@PropertySource~ 指定文件的位置， ~Environment~ 会被自动注入，用来获取具体配置项。

在具体的开发中，有开发环境，测试环境，线上环境，等等，它们的配置通常是不同的。通过java ~spring.profiles.active~ 环境变量可以辅助指定使用的配置文件。参见RootConfig。

** @Profile
当 ~spring.profiles.active~ 的值等于 ~Profile~ 的值时，才激活响应的类或者创建Bean的方法。

** 创建一个Bean来做相应的配置
在 [[MatrixVariable]] 中，我们通过创建Bean来配置支持 MatrixVariable。我猜是spring在初始化时，寻找相应的Bean来做初始化，如果没有就使用默认值。

** 集成一个类来做相应的配置
在 [[JSONP]] 中，通过继承类，来实现JSONP的启用。我猜是spring在初始化是，需要相应的类的最底层的子类来生成相应的配置。

* 异常处理
** 无处不在的异常
jdk和许多的java库，都会抛出异常。在WEB应用中，要和数据库，Redis，HTTP接口等众多其它服务打交道，能抛出异常的地方太多了，要时时检查异常，会淹没代码的业务逻辑。

** 无能为力的异常
在WEB环境下（其它环境也差不多），当异常发生时，所能做的只是返回错误，所以检查异常并没有特别的意义。

** Spring的异常观
在Spring封装异常的地方（例如DAO，RestClientException），它把所有 *Checked* 异常变成了 *Unchecked* 异常，在代码和函数签名里，不用特意的检查异常。

** 统一的异常处理
Spring提供了统一的异常处理机制，借助 ~@ControllerAdvice~ 和 ~@ExceptionHandler~ ，在统一的地方配置好异常处理函数就可以了。业务逻辑可以完全不关心异常。
#+BEGIN_SRC java
@ControllerAdvice
public class GlobalExceptionHandler {
  @ExceptionHandler(DataAccessException.class)
  @ResponseBody
  public ApiResult dataAccessExcption(Exception e) {
    e.printStackTrace();
    return new ApiResult(Errno.INTERNAL_ERROR, "interal db error");
  }
}
#+END_SRC

* RestTemplate

* 数据库相关
** 名目繁多的ORM
ORM 要解决的问题是，java对象和数据表如何映射。有 ~Hibernate JDO JPA~ 等多种方案，这些不熟，不予置评。但理想的ORM应该是什么样的？
- 对象和数据表的映射应该简单
- 映射背后的SQL应该透明
我推荐 [[blog:mybatis-spring-howto][mybatis]]。

** DataSource


** JdbcTemplate
INSERT，UPDATE，DELETE，使用JdbcTemplate很方便（INSERT需要返回自增ID除外），SELECT略麻烦。测试时可以使用。
具体参考 [[http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/#jdbc-JdbcTemplate][JdbcTemplate]]

** 事务
*** Transactional
*** transactionTemplate

* 性能监控和slf4j
