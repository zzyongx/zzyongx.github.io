#+TITLE: Spring Web Develop HOWTO
#+SETUPFILE: ../setup/theme-readtheorg-local.setup

* 前言
2015年10月以前，我做c，c++，perl，lua开发，一直崇尚简洁。虽然很早就读过 thinking in java，但是一直没有涉足java开发，java给我两个感觉，一是笨重，而是庞杂，这里面有各种框架的功劳，看到诸多形形色色的框架，就不寒而栗。

2015年10月以后，终于不得不接触java开发，首当其冲的就是spring。一开始就被各种概念整懵了，IOC，DI，AOP，完全搞不懂这些东西是干啥的，也不知道引入它们的目的。徘徊了一个月，终于恍然大悟，spring其实很简单，如果有人点拨，学习spring的过程不至于这么曲折。随后，面试了一些java开发者，发现大家都知道spring，但是对spring的理解和使用都比较肤浅。本文试图由浅入深的讲解spring的本质是啥，如何最大限度的利用spring。

本文基于Spring4。

* Spring 解决什么问题

** 程序是什么
这个问题似乎太简单，但一时又不知从何说起。先看个简单的程序，hello.pl
#+BEGIN_SRC perl :results output
#!/usr/bin/perl
my $name = shift || "friend s";
print "hello $name\n";
#+END_SRC

#+BEGIN_EXAMPLE
  # ./hello.pl spring
  hello spring
#+END_EXAMPLE

这个程序异常简单，它接受字符串，输出字符串。那么复杂的程序呢？我们考虑http服务器，比如jetty，它的输入输出是什么？

#+BEGIN_EXAMPLE
# curl http://dev/api/login?jsonp=x -vv
> GET /api/login?jsonp=x HTTP/1.1
> User-Agent: curl/7.41.0
> Host: dev
> Accept: */*
>
< HTTP/1.1 200 OK
< Server: nginx/1.8.0
< Date: Thu, 31 Dec 2015 02:43:19 GMT
< Content-Type: application/javascript
< Transfer-Encoding: chunked
< Connection: keep-alive
< X-Content-Type-Options: nosniff
< X-XSS-Protection: 1; mode=block
< Cache-Control: no-cache, no-store, max-age=0, must-revalidate
< Pragma: no-cache
< Expires: 0
< X-Frame-Options: DENY
<
/**/x({"code":400,"message":"bad request","data":{"password":"password is required"}});
#+END_EXAMPLE

这里我们用curl模拟http请求，输入部分包括
- HTTP Method，这里是 ~GET~ ，此外常用的还有 ~POST PUT DELETE~
- 请求 ~url~ ，包括 ~path~ 这里是 ~/api/login~ ，和 ~querystring~ ，这里是 ~jsonp=x~ , ~querystring~ 是可选的
- 请求 ~header~ ，例如 Host，Accept，有些header比其它header要重要一些，比如cookie。
- 请求 ~body~ ，这里body为空，一般请求 ~POST PUT~ 才需要body。

输出部分包括：
- HTTP code，这里是 ~200~。
- 响应 ~header~ ，例如 Content-Type
- 响应 ~body~ ，这里是 /**/开头的行

上面的 ~输入~ 通过 ~tcp~ 协议传送给jetty，jetty通过 ~tcp~ 协议将 ~输出~ 传送给用户。这里针对输入和输出的规定，构成了 ~http~ 协议的内容， ~http~ 协议并没有规定输出 ~body~ 的格式。

从简单的HelloWord，到复杂的web应用，程序所做的事情，无非都是解析输入，产生输出。

** 程序

* Spring 简化输入输出处理

程序的核心是处理输入，Spring作为一个开发框架，提供了大量机制来简化输入的处理。为了表述方便，我把 ~path~ ~querystring~ ~header~ 等这些功能不同的输入称为 ~输入点~。

** Servlet如何处理输入输出

如果开发 ~web~ 应用，需要处理输入，然后按照 ~http~ 协议做输出。如果从零开始，工程量必然很大，重复劳动也很多，于是java规定了 ~Servlet~ 标准，简化http应用的开发，看一个简单的例子：

#+BEGIN_SRC java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class HelloWorld extends HttpServlet 
{
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException {
    String name = request.getParameter("name");
    response.setContentType("text/html");

    // Actual logic goes here.
    PrintWriter out = response.getWriter();
    out.println("<h1> Hello " + name + "</h1>");
  }
}
#+END_SRC

从上面代码可以看出，只要继承 ~HttpServlet~ ，覆盖其中的方法，就可以了。这个过程可以说一句相当简单了。但是有个问题，我们之前说的输入内容在 ~doGet~ 方法里面没有完全体现，想获得具体 ~输入点~ 的数据，还需要从 ~request~ 变量中获取。线上的web应用，肯定不止一个doGet方法，每个方法都要从 ~request~ 中取 ~输入点~ 的数据，代码千篇一律，且可读性差。

除了继承 ~HttpServlet~ ，还需要在 ~Servlet~ 容器（例如jetty）中配置 ~url~ 和 ~HttpServlet~ 子类的对应关系，当 jetty 解析到 ~url~ 部分时，调用响应的子类处理。

** Spring 简化的输入点
- ~url~ 和 ~url~ 处理函数的对应关系
- 获取 ~path~ 的部分路径，例如 /api/user/spring 中的spring
- 获取 ~querysting~ 的某个key的值，例如 jsonp=cb 中的 cb
- 根据 HTTP method 和 ~url~ 映射处理函数
- 获取 ~body~ 中的数据
- 将 ~querystring~ 和 ~body~ 中的数据构造为对象

*** Spring 如何映射url和url处理函数

#+BEGIN_SRC java
@Controller
public class UserController {
  @RequestMapping(value = "/api/login")
  void login() {}

  @RequestMapping(value = {"/api/user/spring", "/api/user"} , method = RequestMethod.GET)
  void updateUser() {}

  @RequestMapping(value = "/api/user/spring", method = RequestMethod.PUT)
  void getUser() {}
}
#+END_SRC

通过 @Controller 标注类，通过 @RequestMapping 来定义 ~url~ 和 ~url~ 处理函数的映射。如果指定了method，只有当method和url同时匹配时，才调用相应的函数。除了path和method，还可以指定headers，params等参数来进一步限定映射关系。

*** Spring 如何获取 path 的部分路径

*** Spring 如何获取 querystring

*** Spring 如何将 querystring 和 body 来构造对象

** Spring 如何简化输出点

* Spring 

spring data bind param，需要setParam函数，但是mybatis不需要。

export MAVEN_OPTS='-Xdebug -Xrunjdwp:transport=dt_socket,address=8998,server=y,suspend=n'
