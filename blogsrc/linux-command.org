#+TITLE: linux命令备忘
#+SETUPFILE: ../setup/theme-readtheorg-local.setup
#+OPTIONS: toc:nil

* java 工具

** 将汉字编码为utf8
#+BEGIN_SRC bash
# echo -n "善良" | native2ascii
\u5584\u826f
#+END_SRC

java的properties文件不能有汉字，可以用~native2ascii~转成utf8写在文件中

** 替换war包中的文件
~jar uf app.war WEB-INF/classes/application-online.properties~ 替换文件，注意必须和war包中的文件保持相同路径

* MySQL
** 把表从A库导入B库
~mysqldump -h host_a -u user_a -ppass_a --skip-add-locks --skip-lock-tables --column-statistics=0 db_a table | mysql -h host_b -u user_b -ppass_b db_b~

* 字符串

** 获取随机字符串
#+BEGIN_SRC bash
# head -n 1024 /dev/urandom | md5sum
9b480cfa33d33009cbae5c0f10d7b2f7  -
#+END_SRC

碰到需要随机数的场合，这是一个不错的方法

** 二进制数据和16进制转换
1. 16进制转二进制 =echo "6F0AD0BFEE7D4B478AFED096E03CD80A" | xxd -r -p | base64=
2. 二进制转16进制 ~echo "bwrQv+59S0eK/tCW4DzYCg==" | base64 -d | xxd -l 16 -c 256 -p~  注意 =-l= 指定的是二进制的长度，必须指定对 =-c= 指定换行位置，用于数据较长时

** linux命令行如何在单引号字符串中转义单引号
使用 ='"'"'= 例如： ~echo "100 XY" | perl -an -e 'print "UPDATE TABLE test SET config='"'"'${F[1]}'"'"' WHERE id=${F[0]};\n"'~
输出 ~UPDATE TABLE test SET config='XY' WHERE id=100;~

* OpenSSL

** HMAC
#+BEGIN_SRC bash
# echo -n "initial text" | openssl dgst -sha1 -hmac "9b480cfa33d33009cbae5c0f10d7b2f7"
(stdin)= 32740bc521b8476818d7b7ba056ff7e758217adc
#+END_SRC

可以用来检查编程结果的正确性

** 对称加密
1. =openssl rand 32 -out keyfile= 产生秘钥，keyfile是二进制的
2. =openssl rand 32 -base64 -out keyfile.b64= keyfile.b64是base64的，除了正常的base64，文件末尾多了一个换行
3. =openssl rand 32 -hex -out keyfile.hex= keyfile.hex是十六进制的
4. =openssl enc -aes-256-ecb -in content -nosalt -a -A -K $(cat keyfile.hex) -out content.dec= 加密
5. =openssl enc -aes-256-ecb -in content.dec -nosalt -a -A -p -K $(cat keyfile.hex) -d= 解密
6. =openssl enc -aes-256-ecb -in content -nosalt -a -A -p -kfile keyfile= 加密，结果和4不同，kfile参数指定的key并不是加密使用的key
7. 4,5 使用 =-K= 指定了实际使用的key，用于不同语言间程序互操作，如果加解密都使用openssl，6也可以

** 非对称加密
1. =openssl genrsa -out private.pem 1024= private.pem 是产生的私钥
2. =openssl rsa -in private.pem -inform PEM -outform PEM -pubout -out public.pem= 根据私钥生成公钥
3. =openssl rsautl -encrypt -pubin -inkey public.pem -in keyfile -out keyfile.enc= 用公钥加密对称秘钥
4. =openssl rsautl -decrypt -inkey private.pem -in keyfile.enc -out keyfile.dec= 用私钥解密对称秘钥

** 私钥签名/公钥验证签名
1. =openssl dgst -sha256 -sign private.pem -out /tmp/sign.sha256 datafile= 私钥签名
2. =openssl dgst -sha256 -sign private.pem -hex -out /tmp/sign.sha256 datafile= 私钥签名，输出hex
3. =openssl dgst -sha256 -verify public.pem -signature /tmp/sign.sha256 datafile= 公钥验证签名

* Image
** 查看图片大小
=identify big.png=

** 改变图片大小
 =convert big.png -resize 20% small.png= =convert= 可以看做ImageMagick库的命令行版本。

* Bash
** ssh 自动补全主机名
#+BEGIN_SRC bash
# cat > /etc/bash_completion.d/ssh
complete -W "$(echo `cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | uniq | grep -v "\["`;)" ssh
# source /etc/bash_completion.d/ssh
# cat >> ~/.bashrc
for f in /etc/bash_completion.d/*; do
  source $f
done
#+END_SRC

** ssh 保持心跳（客户端配置）
#+BEGIN_SRC bash
# cat > /etc/ssh_config
Host *
    ServerAliveInterval 300
    ServerAliveCountMax 23
#+END_SRC

** ssh 启动命令后台执行
=ssh -f user@host 'whatever_command &>/dev/null &'= 重定向输出是关键

** 如何用命令跳过文件的第一行
#+BEGIN_SRC bash
# tail -n +2 file
#+END_SRC

** 如何删除海量文件
#+BEGIN_SRC bash
# rm /var/spool/postfix/maildrop/* -f
-bash: /bin/rm: 参数列表过长
# find /var/spool/postfix/maildrop/ -type f -delete
#+END_SRC

** pstree 命令
- ~pstree -a <pid>~ 显示进程<pid>的进程树，可用看到进程中线程的数量
- ~pstree -ap <pid> | grep -v '},'~ 显示<pid>的进程数，可用看到pid，使用grep过滤线程信息，有时候实在太多了

** date 命令
- ~date +%s~ 获取时间戳
- ~date @1480065287~ 获取时间戳对应的时间

** 输入换行和回车
- echo "A,B" | tr ',' $'\n'   逗号转换行
- echo "A,B" | tr ',' $'\t'   逗号转tab

** 干掉有问题的nginx进程
- ~ps -eo pcpu,bsdtime,pid,user,args | grep -e '[n]ginx: worker' | sort -k1 -r | perl -ane 'if ($F[0] * 1 > 95 || int($F[1]) > 60) { print "echo $_ kill ${F[2]}; sleep 1; kill -9 ${F[2]} \n" }' | bash -x~

** 获取进程启动时间
- =ls -ld /proc/<pid>=  这种方法比较好记
- =ps -eo pid,cmd,etime=

* sshd
** 禁用密码登陆
修改 =/etc/ssh/sshd_config= 配置文件
#+BEGIN_EXAMPLE
ChallengeResponseAuthentication no
PasswordAuthentication no
UsePAM no
#+END_EXAMPLE
修改之后 =/etc/init.d/sshd reload= 。切记： *测试时新启终端，不要退出当前登陆，以免配置错误，再也无法登陆*

* Net
** 测试网速
- ~curl http://example.com/bigfile.txt >/dev/null -vv~ 会显示打开速度
- ~rsync -v example.com::path/bigfile.txt /bigfile.txt.`date +%s`~ 使用rsync，目标文件必须每次都不同

* 比较两个排序的文件 comm
假设有两个文件A B，每行一个IP，comm要求文件必须是排序的，如果已排序，可以忽略下面的sort命令
** 交集
~comm -12 <(sort A) <(sort B)~ 此外，还可以使用grep， ~grep -f A B~ 。

** 差集 A - B
~comm -23 <(sort A) <(sort B)~

** 差集 B - A
~comm -13 <(sort B) <(sort A)~

* 比较两个文件
** 普通比较
vimdiff和diff

** 忽略掉狭义的空行
=diff -b file1 file2=

** 忽略掉空行
如果一行只包含空格，tab或者换行符，就算空行。 =diff <(grep -P '\w' file1) <(grep -P '\w' file2)=
