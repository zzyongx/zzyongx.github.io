#+TITLE: 从50余次错误中学得的8个系统设计原则
#+OPTIONS: toc:nil
#+SETUPFILE: ../setup/theme-readtheorg-local.setup

原文：[[https://priyankvex.wordpress.com/2018/03/11/8-system-design-principles-i-learned-after-doing-it-wrong-more-than-50-times/][8 System Design Principles I learned After Doing It Wrong More than 50 Times!]] 本文夹杂着很多我自己的感悟。

* 透过功能需求看底层问题
用户往往会说，我需要一个什么功能，而不会说我要解决一个什么问题。为此需要从用户的需求，挖掘整理出问题的本质，为这个本质需求设计功能。

例如：产品已有功能是IM发送通知，用户提需求“IM发送通知的同时，用邮件也发送一份”，用户需要邮件是因为邮件翻阅历史通知更方便，本质需求是方便的查看通知历史，而不是邮件发送通知。

* 如何让功能更健壮、稳定、可用
1. 功能的用户是谁，同样的功能，用户不同，功能的设计有很大不同
2. 功能的使用场景，例如：让运维人员快速回滚系统版本的产品一定要优先考虑移动端的操作性，这样用户可以随时随地操作。

* 首次迭代交付什么
按时交付足够好的产品，优于永远处于开发状态的完美产品。例如：线上日志检索系统，支持压缩格式的日志是完美状态，但用户90%的情况都是检索未压缩日志，这时就可用先不支持压缩日志。虽然不完美，但用户可用提前用上。

* 基于现有功能迭代是否容易
我不太同意原文观点，我认为除非未来的功能路线图非常清楚，否则把现有功能实现好就行了。预测未来是困难的，不要为了未来渺茫的功能预留空间，未来到来时，重新设计也不会太困难。

* 影响系统扩展的可能瓶颈是什么
也不完全同意原文观点，要考虑可扩展性，但不考虑无限扩展性。无论是计算还是存储，在某个阀值内某种架构是适当的，超过某个阀值，重新架构才是最好的选择，这个已经不能算是可扩展性了。

* 收集什么数据，如何使用它们
对于一个产品而言，开发功能并上线，只是第一步，运维和运营才是关键。运维保证现在的功能正确对外提供服务，运营是扩大功能的用户，并为功能迭代寻找数据支撑。两者需要收集的数据可能有重合，但看数据的视角一般不同。

运维人员通常需要访问量，耗时，正确性等数据，运营人员通常需要用户数，活跃度，功能使用情况等数据。这些数据大部分是产品上线前就要设计好，产品上线后可以直接收集的。

* 代码的修改体验如何
核心代码要有测试，特别是会破坏数据完整性的代码。

* 如何度量功能是否被正确提供
专门强调运维人员如何使用收集的数据。开发和测试保证的正确性，本质上是静态正确性，一是用户少，二是运行环境稳定。上线后要保证动态正确性，这时候用户多，数据也变得多样，并且运行环境不断变化，例如存储数据量变大了，可能导致性能问题。运维人员根据运行数据判断功能是否正确提供（服务是否正常）。系统可供收集的数据越多，判断服务是否正常越有把握。

* 我自己的一点经验：
系统一定要可回滚，这里不仅包括代码可回滚，还包括数据要先后兼容。只有系统可回滚，在上线时发现问题才能以最快的速度恢复。可回滚非常困难，尤其在升级涉及到大量数据的时候。
