#+TITLE: CI和CD的真正区别
#+AUTHOR: zzyongx
#+SETUPFILE: ../setup/theme-readtheorg-local.setup
#+OPTIONS: toc:nil

原文 [[https://fire.ci/blog/the-difference-between-ci-and-cd/][The real difference between CI and CD]]

在摆弄概念上,我的确是个泥腿子.开发过不少大型项目,但团队规模通常是1-2个人.做架构师的时候,摆弄过jenkins,git接受merge之后触发编译,测试,上线到测试环境,运转的相当不错.

对CI和CD望文生意,觉得能做到这样已然不错,实际上我那套jenkins的玩法的确做的不错.我这么自信,基于两段经历.
1. 接手了兄弟部门离职同事的代码,一个人开发,通过REST API和其它功能集成.是的,有CI,每次提交之后自动编译一把,没了,仅此而已.这年头还有人敢在代码编译不过的情况下向主分支提交代码吗?这样的CI有啥用?
2. 技术委员会按照开发语言划分分会,大家有兴趣讨论八页纸的代码格式规范,可是提到CI,竟然也是确保编译能过.

此文解释CI和CD区别的同时,科普了下啥是CI和CD.作笔记如下:

* CI是一个团队问题
** CI是什么
CI和工具无关,CI是一种开发方式.每次开发一个小功能(如果功能大,就拆解),开发完成后立即合并到主分支,至少一天commit一次,这样保证合并的代码量很少.如果团队的风格是一次合并大量代码到主分支,CI不CI的也不重要了(看不出哪持续嘛).

小功能即合并入主分支,也意味着要频繁把主分支merge到自己的开发分支.如果某个功能并入主分支时导致不能编译,那么所有把主分支merge到自己分支的人都会受影响,团队全阻塞在这个问题上,这个代价是高昂的,这是CI面临的 *主要问题* .

个人观点: 我认为这个问题并不严重,虽然大家都在一个仓库开发,但是功能划分是比较清楚的,所以并不需要频繁从主分支merge,只管向主分支merge就行.

** CI的目标
考虑到CI面临的问题,CI保证并入主分支的代码正确就非常重要了.然而既然持续集成,每次集成的耗时又不能太多,最好在7分钟完成(干等7分钟是可以接受的,太久就干别的事情去了,当集成出现问题,再把注意力切回来,没那么容易).又要对,又要耗时短,所以CI的目标不是保证正确,只要保证基本正确就行了(编译通过,基本功能能用).

个人观点: 基本正确容易理解,把测试分成保证基本正确的和保证正确的,就有点无理取闹了.并且以大部分开发的秉性,耗时久的担心是多余的,因为根本没测试,哈哈.

* CD是一个工程问题
CI只保证基本正确,那只能靠CD保证正确了.CD阶段要单元测试,集成测试,性能测试等等.

* 个人总结:
结果导向,项目开发无非是正确和效率,能达成这个目标的话,想咋弄咋弄吧.不忘初心,别搞形式主义就行.另外,95%的项目都很小,如果你觉得大,可能只是你觉得大而已.小项目更得务实,别花拳秀腿.
